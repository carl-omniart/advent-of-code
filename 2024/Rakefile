module AOC
  class << self
    def year
      File.basename(Dir.getwd).to_i
    end

    def days
      Dir.each_child("./lib")
         .select { |child| File.file? child }
         .map { |file| to_day file }
         .sort
    end
  
    def last_day
      days.max || 0
    end  
  
    def next_day
      last_day + 1
    end

    def data_path day
      filename = to_var day
      "./data/#{filename}.txt"
    end

    def lib_path day
      filename = to_var day
      "./lib/#{filename}.rb"
    end

    def spec_path day
      filename = to_var day
      "./spec/#{filename}_spec.rb"
    end

    def lib_temp day
      File.read("./temp/lib.rb")
          .gsub('ModuleName', to_const(day))
    end

    def spec_temp day
      File.read("./temp/spec.rb")
          .gsub('FileName', to_var(day))
          .gsub('ModuleName', to_const(day))
    end
    
    def data day
      File.read data_path(day)
    end

    def mod day
      const = to_const day
      Object.const_get(const).tap { |mod| yield mod if block_given? }
    end

    def create_new_day
      next_day.tap do |day|
        File.open(lib_path(day), 'w') { |f| f.write lib_temp(day) }
        File.open(spec_path(day), 'w') { |f| f.write spec_temp(day) }
      end
    end

    def test day
      load spec_path(day)
    end

    def solve day
      load lib_path(day)
      
      mod  = mod day
      data = data day
      
      puts "Day #{mod.day}: #{mod.title}"
      puts "  1. #{mod.solve_part_one(data)}"
      puts "  2. #{mod.solve_part_two(data)}"
    end

    def test_all
      days.each { |day| test day }
    end

    def solve_all
      days.each { |day| solve day }
    end

    def test_and_solve_all
      days.each do |day| 
        test day
        solve day
      end
    end
    
    private

    def to_const day
      "Day%02d" % day
    end

    def to_var day
      "day_%02d" % day
    end

    def to_day path
      filename = File.basename path
      raise ArgumentError, "Invalid Path: ${path}" unless filename =~ /day_\d\d/

      filename.gsub('day_', '').to_i
    end
  end
end

task(:new) { |task| AOC.create_new_day }

task :test, [:day] do |task, args|
  args.with_defaults :day => AOC.last_day
  day = args[:day].to_i

  AOC.test day
end

task :solve, [:day] do |task, args|
  args.with_defaults :day => most_recent_day
  day = args[:day].to_i

  AOC.solve day
end

task(:test_all) { |task| AOC.test_all }
task(:solve_all) { |task| AOC.solve_all }
task(:all) { |task| AOC.test_and_solve_all }

task :defaul => :all